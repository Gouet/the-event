{"version":3,"sources":["serviceWorker.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","components/SignOut/index.js","components/Session/context.js","components/Session/withAuthentication.js","components/Session/withAuthorization.js","constants/routes.js","components/Navigation/index.js","components/Landing/index.js","components/SignUp/index.js","components/PasswordForget/index.js","components/SignIn/index.js","components/Home/index.js","components/PasswordChange/index.js","components/Account/index.js","components/Admin/index.js","components/App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","app","initializeApp","this","type","onClick","AuthUserContext","withAuthentication","WithAuthentication","state","authUser","listener","onAuthStateChanged","setState","Provider","value","withAuthorization","condition","WithAuthorization","history","push","compose","withRouter","NavigationAuth","to","SignOut","NavigationNonAuth","Navigation","Landing","INITIAL_STATE","username","passwordOne","passwordTwo","error","SignUpFormBase","onSubmit","event","then","catch","preventDefault","onChange","target","name","isInvalid","placeholder","disabled","message","SignUpLink","SignUpForm","SignUpPage","PasswordForgetFormBase","PasswordForgetLink","PasswordForgetPage","PasswordForgetForm","SignInFormBase","SignInForm","SignInPage","PasswordChangeForm","PasswordChange","roles","ROLES","exact","path","component","LandingPage","HomePage","AccountPage","AdminPage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.5c3cf7c5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\nexport const withFirebase = Component => props => (\n    <FirebaseContext.Consumer>\n      {firebase => <Component {...props} firebase={firebase} />}\n    </FirebaseContext.Consumer>\n  );\n\nexport default FirebaseContext;\n\n","import app from 'firebase/app';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyCDU5hZsr2umVz8UMAzrwq6KUyhWRtg6o0\",\n    authDomain: \"outprojectdev.firebaseapp.com\",\n    databaseURL: \"https://outprojectdev.firebaseio.com\",\n    projectId: \"outprojectdev\",\n    storageBucket: \"outprojectdev.appspot.com\",\n    messagingSenderId: \"584695216902\",\n    appId: \"1:584695216902:web:1ff492cb8cafdc7beabc87\",\n    measurementId: \"G-XNZLGJL71B\"\n  };\n\n\n  class Firebase {\n    constructor() {\n      app.initializeApp(config);\n\n      this.auth = app.auth();\n    }\n\n    doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n    doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignOut = () => this.auth.signOut();\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n  }\n  \n  export default Firebase;","import FirebaseContext, { withFirebase } from './context';\nimport Firebase from './firebase';\n\nexport default Firebase;\n\nexport { FirebaseContext, withFirebase };","import React from 'react';\nimport { withFirebase } from '../Firebase';\n\nconst SignOutButton = ({ firebase }) => (\n  <button type=\"button\" onClick={firebase.doSignOut}>\n    Sign Out\n  </button>\n);\n\nexport default withFirebase(SignOutButton);","import React from 'react';\n\nconst AuthUserContext = React.createContext(null);\n\nexport default AuthUserContext;\n","import React from 'react';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\nconst withAuthentication = Component => {\n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: null,\n      };\n    }\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(\n        authUser => {\n          authUser\n            ? this.setState({ authUser })\n            : this.setState({ authUser: null });\n        },\n      );\n    }\n    componentWillUnmount() {\n      this.listener();\n    }\n    render() {\n      return (\n        <AuthUserContext.Provider value={this.state.authUser}>\n          <Component {...this.props} />\n        </AuthUserContext.Provider>\n      );\n    }\n  }\n  return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst withAuthorization = condition => Component => {\n  class WithAuthorization extends React.Component {\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        if (!condition(authUser)) {\n          this.props.history.push(ROUTES.SIGN_IN);\n        }\n      });\n    }\n    componentWillUnmount() {\n      this.listener();\n    }\n    render() {\n      return (\n        <AuthUserContext.Consumer>\n          {authUser =>\n            condition(authUser) ? <Component {...this.props} /> : null\n          }\n        </AuthUserContext.Consumer>\n      );\n    }\n  }\n  return compose(\n    withRouter,\n    withFirebase,\n  )(WithAuthorization);\n};\n\nexport default withAuthorization;","export const LANDING = '/';\nexport const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const HOME = '/home';\nexport const ACCOUNT = '/account';\nexport const ADMIN = '/admin';\nexport const PASSWORD_FORGET = '/pw-forget';","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignOutButton from '../SignOut';\nimport * as ROUTES from '../../constants/routes';\nimport { AuthUserContext } from '../Session';\n\nconst Navigation = () => (\n  <div>\n    <AuthUserContext.Consumer>\n      {authUser =>\n        authUser ? <NavigationAuth /> : <NavigationNonAuth />\n      }\n    </AuthUserContext.Consumer>\n  </div>\n);\n\nconst NavigationAuth = () => (\n  <ul>\n    <li>\n      <Link to={ROUTES.LANDING}>Landing</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.HOME}>Home</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.ACCOUNT}>Account</Link>\n    </li>\n    <li>\n      <SignOutButton />\n    </li>\n  </ul>\n);\n\nconst NavigationNonAuth = () => (\n  <ul>\n    <li>\n      <Link to={ROUTES.LANDING}>Landing</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.SIGN_IN}>Sign In</Link>\n    </li>\n  </ul>\n);\n\nexport default Navigation;","import React from 'react';\n\nconst Landing = () => (\n  <div>\n    <h1>Landing</h1>\n  </div>\n);\n\nexport default Landing;","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport { FirebaseContext } from '../Firebase';\nimport { withFirebase } from '../Firebase';\nimport { compose } from 'recompose';\n\nconst SignUpPage = () => (\n  <div>\n    <h1>SignUp</h1>\n    <SignUpForm />\n  </div>\n);\n\nconst INITIAL_STATE = {\n    username: '',\n    email: '',\n    passwordOne: '',\n    passwordTwo: '',\n    error: null,\n  };\n\nclass SignUpFormBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { ...INITIAL_STATE };\n  }\n  \n  onSubmit = event => {\n    const { username, email, passwordOne } = this.state;\n    this.props.firebase\n      .doCreateUserWithEmailAndPassword(email, passwordOne)\n      .then(authUser => {\n        this.setState({ ...INITIAL_STATE });\n        this.props.history.push(ROUTES.HOME);\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n    event.preventDefault();\n  }\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  \n  render() {\n    const {\n        username,\n        email,\n        passwordOne,\n        passwordTwo,\n        error,\n      } = this.state;\n\n      const isInvalid =\n      passwordOne !== passwordTwo ||\n      passwordOne === '' ||\n      email === '' ||\n      username === '';\n\n      return (\n        <form onSubmit={this.onSubmit}>\n          <input\n            name=\"username\"\n            value={username}\n            onChange={this.onChange}\n            type=\"text\"\n            placeholder=\"Full Name\"\n          />\n          <input\n            name=\"email\"\n            value={email}\n            onChange={this.onChange}\n            type=\"text\"\n            placeholder=\"Email Address\"\n          />\n          <input\n            name=\"passwordOne\"\n            value={passwordOne}\n            onChange={this.onChange}\n            type=\"password\"\n            placeholder=\"Password\"\n          />\n          <input\n            name=\"passwordTwo\"\n            value={passwordTwo}\n            onChange={this.onChange}\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n          />\n          <button disabled={isInvalid} type=\"submit\">\n          Sign Up\n        </button>\n\n          {error && <p>{error.message}</p>}\n\n        </form>)\n  }\n}\n\n\nconst SignUpLink = () => (\n  <p>\n    Don't have an account? <Link to={ROUTES.SIGN_UP}>Sign Up</Link>\n  </p>\n);\n\nconst SignUpForm = compose(\n    withRouter,\n    withFirebase,\n  )(SignUpFormBase);\n\nexport default SignUpPage;\n\nexport { SignUpForm, SignUpLink };","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst PasswordForgetPage = () => (\n  <div>\n    <h1>PasswordForget</h1>\n    <PasswordForgetForm />\n  </div>\n);\n\nconst INITIAL_STATE = {\n  email: '',\n  error: null,\n};\n\nclass PasswordForgetFormBase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n  onSubmit = event => {\n    const { email } = this.state;\n    this.props.firebase\n      .doPasswordReset(email)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n    event.preventDefault();\n  };\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  render() {\n    const { email, error } = this.state;\n    const isInvalid = email === '';\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"email\"\n          value={this.state.email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Reset My Password\n        </button>\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\nconst PasswordForgetLink = () => (\n  <p>\n    <Link to={ROUTES.PASSWORD_FORGET}>Forgot Password?</Link>\n  </p>\n);\n\nexport default PasswordForgetPage;\n\nconst PasswordForgetForm = withFirebase(PasswordForgetFormBase);\n\nexport { PasswordForgetForm, PasswordForgetLink };","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport { SignUpLink } from '../SignUp';\nimport { PasswordForgetLink } from '../PasswordForget';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst SignInPage = () => (\n  <div>\n    <h1>SignIn</h1>\n    <SignInForm />\n    <PasswordForgetLink />\n    <SignUpLink />\n  </div>\n);\n\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n  error: null,\n};\n\nclass SignInFormBase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n  onSubmit = event => {\n    const { email, password } = this.state;\n    this.props.firebase\n      .doSignInWithEmailAndPassword(email, password)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n        this.props.history.push(ROUTES.HOME);\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n    event.preventDefault();\n  };\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  render() {\n    const { email, password, error } = this.state;\n    const isInvalid = password === '' || email === '';\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"email\"\n          value={email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <input\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Sign In\n        </button>\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\nconst SignInForm = compose(\n  withRouter,\n  withFirebase,\n)(SignInFormBase);\n\nexport default SignInPage;\n\nexport { SignInForm };","import React from 'react';\nimport { withAuthorization } from '../Session';\nconst HomePage = () => (\n  <div>\n    <h1>Home Page</h1>\n    <p>The Home Page is accessible by every signed in user.</p>\n  </div>\n);\nconst condition = authUser => !!authUser;\nexport default withAuthorization(condition)(HomePage);","import React, { Component } from 'react';\nimport { withFirebase } from '../Firebase';\nconst INITIAL_STATE = {\n  passwordOne: '',\n  passwordTwo: '',\n  error: null,\n};\nclass PasswordChangeForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n  onSubmit = event => {\n    const { passwordOne } = this.state;\n    this.props.firebase\n      .doPasswordUpdate(passwordOne)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n    event.preventDefault();\n  };\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  render() {\n    const { passwordOne, passwordTwo, error } = this.state;\n    const isInvalid =\n      passwordOne !== passwordTwo || passwordOne === '';\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"passwordOne\"\n          value={passwordOne}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"New Password\"\n        />\n        <input\n          name=\"passwordTwo\"\n          value={passwordTwo}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Confirm New Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Reset My Password\n        </button>\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\nexport default withFirebase(PasswordChangeForm);","import React from 'react';\nimport { AuthUserContext, withAuthorization } from '../Session';\nimport { PasswordForgetForm } from '../PasswordForget';\nimport PasswordChangeForm from '../PasswordChange';\n\nconst AccountPage = () => (\n  <AuthUserContext.Consumer>\n    {authUser => (\n      <div>\n        <h1>Account: {authUser.email}</h1>\n        <PasswordForgetForm />\n        <PasswordChangeForm />\n      </div>\n    )}\n  </AuthUserContext.Consumer>\n);\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(AccountPage);","import React from 'react';\nimport * as ROLES from '../../constants/roles';\nimport { withAuthorization } from '../Session';\n\nconst AdminPage = () => (\n  <div>\n    <h1>Admin</h1>\n    <p>\n      Restricted area! Only users with the admin role are authorized.\n    </p>\n  </div>\n);\n\nconst condition = authUser =>\n  authUser && !!authUser.roles[ROLES.ADMIN];\n\nexport default withAuthorization(condition)(AdminPage);","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Navigation from '../Navigation';\nimport LandingPage from '../Landing';\nimport SignUpPage from '../SignUp';\nimport SignInPage from '../SignIn';\nimport PasswordForgetPage from '../PasswordForget';\nimport HomePage from '../Home';\nimport AccountPage from '../Account';\nimport AdminPage from '../Admin';\nimport * as ROUTES from '../../constants/routes';\nimport { withAuthentication } from '../Session';\n\nconst App = () => (\n  <Router>\n    <div>\n      <Navigation />\n      <hr />\n      <Route exact path={ROUTES.LANDING} component={LandingPage} />\n      <Route path={ROUTES.SIGN_UP} component={SignUpPage} />\n      <Route path={ROUTES.SIGN_IN} component={SignInPage} />\n      <Route\n        path={ROUTES.PASSWORD_FORGET}\n        component={PasswordForgetPage}\n      />\n      <Route path={ROUTES.HOME} component={HomePage} />\n      <Route path={ROUTES.ACCOUNT} component={AccountPage} />\n      <Route path={ROUTES.ADMIN} component={AdminPage} />\n    </div>\n  </Router>\n);\n\nexport default withAuthentication(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport Firebase, { FirebaseContext } from './components/Firebase';\n\nReactDOM.render(\n  <FirebaseContext.Provider value={new Firebase()}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}